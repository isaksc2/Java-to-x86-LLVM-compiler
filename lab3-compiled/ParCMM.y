-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCMM where
import qualified AbsCMM
import LexCMM
}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pListStm ListStm
%name pExp6 Exp6
%name pExp5 Exp5
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pListExp ListExp
%name pIncDecOp IncDecOp
%name pMulOp MulOp
%name pAddOp AddOp
%name pCmpOp CmpOp
%name pBoolLit BoolLit
%name pType Type
%name pListId ListId
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  '++' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '--' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'bool' { PT _ (TS _ 19) }
  'double' { PT _ (TS _ 20) }
  'else' { PT _ (TS _ 21) }
  'false' { PT _ (TS _ 22) }
  'if' { PT _ (TS _ 23) }
  'int' { PT _ (TS _ 24) }
  'return' { PT _ (TS _ 25) }
  'true' { PT _ (TS _ 26) }
  'void' { PT _ (TS _ 27) }
  'while' { PT _ (TS _ 28) }
  '{' { PT _ (TS _ 29) }
  '||' { PT _ (TS _ 30) }
  '}' { PT _ (TS _ 31) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_Id { PT _ (T_Id $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ($1)) :: Double }

Id :: { AbsCMM.Id}
Id  : L_Id { AbsCMM.Id $1 }

Program :: { AbsCMM.Program }
Program : ListDef { AbsCMM.PDefs $1 }

Def :: { AbsCMM.Def }
Def : Type Id '(' ListArg ')' '{' ListStm '}' { AbsCMM.DFun $1 $2 $4 $7 }

ListDef :: { [AbsCMM.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Arg :: { AbsCMM.Arg }
Arg : Type Id { AbsCMM.ADecl $1 $2 }

ListArg :: { [AbsCMM.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Stm :: { AbsCMM.Stm }
Stm : Exp ';' { AbsCMM.SExp $1 }
    | Type ListId ';' { AbsCMM.SDecls $1 $2 }
    | Type Id '=' Exp ';' { AbsCMM.SInit $1 $2 $4 }
    | 'return' Exp ';' { AbsCMM.SReturn $2 }
    | 'while' '(' Exp ')' Stm { AbsCMM.SWhile $3 $5 }
    | '{' ListStm '}' { AbsCMM.SBlock $2 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsCMM.SIfElse $3 $5 $7 }

ListStm :: { [AbsCMM.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp6 :: { AbsCMM.Exp }
Exp6 : BoolLit { AbsCMM.EBool $1 }
     | Integer { AbsCMM.EInt $1 }
     | Double { AbsCMM.EDouble $1 }
     | Id { AbsCMM.EId $1 }
     | Id '(' ListExp ')' { AbsCMM.EApp $1 $3 }
     | Id IncDecOp { AbsCMM.EPost $1 $2 }
     | IncDecOp Id { AbsCMM.EPre $1 $2 }
     | '(' Exp ')' { $2 }

Exp5 :: { AbsCMM.Exp }
Exp5 : Exp5 MulOp Exp6 { AbsCMM.EMul $1 $2 $3 } | Exp6 { $1 }

Exp4 :: { AbsCMM.Exp }
Exp4 : Exp4 AddOp Exp5 { AbsCMM.EAdd $1 $2 $3 } | Exp5 { $1 }

Exp3 :: { AbsCMM.Exp }
Exp3 : Exp4 CmpOp Exp4 { AbsCMM.ECmp $1 $2 $3 } | Exp4 { $1 }

Exp2 :: { AbsCMM.Exp }
Exp2 : Exp2 '&&' Exp3 { AbsCMM.EAnd $1 $3 } | Exp3 { $1 }

Exp1 :: { AbsCMM.Exp }
Exp1 : Exp1 '||' Exp2 { AbsCMM.EOr $1 $3 } | Exp2 { $1 }

Exp :: { AbsCMM.Exp }
Exp : Id '=' Exp { AbsCMM.EAss $1 $3 } | Exp1 { $1 }

ListExp :: { [AbsCMM.Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }

IncDecOp :: { AbsCMM.IncDecOp }
IncDecOp : '++' { AbsCMM.OInc } | '--' { AbsCMM.ODec }

MulOp :: { AbsCMM.MulOp }
MulOp : '*' { AbsCMM.OTimes } | '/' { AbsCMM.ODiv }

AddOp :: { AbsCMM.AddOp }
AddOp : '+' { AbsCMM.OPlus } | '-' { AbsCMM.OMinus }

CmpOp :: { AbsCMM.CmpOp }
CmpOp : '<' { AbsCMM.OLt }
      | '>' { AbsCMM.OGt }
      | '<=' { AbsCMM.OLtEq }
      | '>=' { AbsCMM.OGtEq }
      | '==' { AbsCMM.OEq }
      | '!=' { AbsCMM.ONEq }

BoolLit :: { AbsCMM.BoolLit }
BoolLit : 'true' { AbsCMM.LTrue } | 'false' { AbsCMM.LFalse }

Type :: { AbsCMM.Type }
Type : 'bool' { AbsCMM.Type_bool }
     | 'int' { AbsCMM.Type_int }
     | 'double' { AbsCMM.Type_double }
     | 'void' { AbsCMM.Type_void }

ListId :: { [AbsCMM.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

