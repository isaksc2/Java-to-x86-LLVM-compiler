-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParJavalette where
import qualified AbsJavalette
import LexJavalette
}

%name pProg Prog
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  'boolean' { PT _ (TS _ 21) }
  'double' { PT _ (TS _ 22) }
  'else' { PT _ (TS _ 23) }
  'false' { PT _ (TS _ 24) }
  'if' { PT _ (TS _ 25) }
  'int' { PT _ (TS _ 26) }
  'return' { PT _ (TS _ 27) }
  'true' { PT _ (TS _ 28) }
  'voi' { PT _ (TS _ 29) }
  'void' { PT _ (TS _ 30) }
  'while' { PT _ (TS _ 31) }
  '{' { PT _ (TS _ 32) }
  '||' { PT _ (TS _ 33) }
  '}' { PT _ (TS _ 34) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { AbsJavalette.Ident}
Ident  : L_Ident { AbsJavalette.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ($1)) :: Double }

String  :: { String }
String   : L_quoted { $1 }

Prog :: { AbsJavalette.Prog }
Prog : ListTopDef { AbsJavalette.Program $1 }

TopDef :: { AbsJavalette.TopDef }
TopDef : Type Ident '(' ListArg ')' Blk { AbsJavalette.FnDef $1 $2 $4 $6 }

ListTopDef :: { [AbsJavalette.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Arg :: { AbsJavalette.Arg }
Arg : Type Ident { AbsJavalette.Argument $1 $2 }

ListArg :: { [AbsJavalette.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Blk :: { AbsJavalette.Blk }
Blk : '{' ListStmt '}' { AbsJavalette.Block $2 }

ListStmt :: { [AbsJavalette.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsJavalette.Stmt }
Stmt : ';' { AbsJavalette.Empty }
     | Blk { AbsJavalette.BStmt $1 }
     | Type ListItem ';' { AbsJavalette.Decl $1 $2 }
     | Ident '=' Expr ';' { AbsJavalette.Ass $1 $3 }
     | Ident '++' ';' { AbsJavalette.Incr $1 }
     | Ident '--' ';' { AbsJavalette.Decr $1 }
     | 'return' Expr ';' { AbsJavalette.Ret $2 }
     | 'return' ';' { AbsJavalette.VRet }
     | 'if' '(' Expr ')' Stmt { AbsJavalette.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsJavalette.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsJavalette.While $3 $5 }
     | Expr ';' { AbsJavalette.SExp $1 }

Item :: { AbsJavalette.Item }
Item : Ident { AbsJavalette.NoInit $1 }
     | Ident '=' Expr { AbsJavalette.Init $1 $3 }

ListItem :: { [AbsJavalette.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

Type :: { AbsJavalette.Type }
Type : 'int' { AbsJavalette.Int }
     | 'double' { AbsJavalette.Doub }
     | 'boolean' { AbsJavalette.Bool }
     | 'void' { AbsJavalette.Void }
     | 'voi' { AbsJavalette.Voi }

ListType :: { [AbsJavalette.Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }

Expr6 :: { AbsJavalette.Expr }
Expr6 : Ident { AbsJavalette.EVar $1 }
      | Integer { AbsJavalette.ELitInt $1 }
      | Double { AbsJavalette.ELitDoub $1 }
      | 'true' { AbsJavalette.ELitTrue }
      | 'false' { AbsJavalette.ELitFalse }
      | Ident '(' ListExpr ')' { AbsJavalette.EApp $1 $3 }
      | String { AbsJavalette.EString $1 }
      | '(' Expr ')' { $2 }

Expr5 :: { AbsJavalette.Expr }
Expr5 : '-' Expr6 { AbsJavalette.Neg $2 }
      | '!' Expr6 { AbsJavalette.Not $2 }
      | Expr6 { $1 }

Expr4 :: { AbsJavalette.Expr }
Expr4 : Expr4 MulOp Expr5 { AbsJavalette.EMul $1 $2 $3 }
      | Expr5 { $1 }

Expr3 :: { AbsJavalette.Expr }
Expr3 : Expr3 AddOp Expr4 { AbsJavalette.EAdd $1 $2 $3 }
      | Expr4 { $1 }

Expr2 :: { AbsJavalette.Expr }
Expr2 : Expr2 RelOp Expr3 { AbsJavalette.ERel $1 $2 $3 }
      | Expr3 { $1 }

Expr1 :: { AbsJavalette.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsJavalette.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsJavalette.Expr }
Expr : Expr1 '||' Expr { AbsJavalette.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsJavalette.Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsJavalette.AddOp }
AddOp : '+' { AbsJavalette.Plus } | '-' { AbsJavalette.Minus }

MulOp :: { AbsJavalette.MulOp }
MulOp : '*' { AbsJavalette.Times }
      | '/' { AbsJavalette.Div }
      | '%' { AbsJavalette.Mod }

RelOp :: { AbsJavalette.RelOp }
RelOp : '<' { AbsJavalette.LTH }
      | '<=' { AbsJavalette.LE }
      | '>' { AbsJavalette.GTH }
      | '>=' { AbsJavalette.GE }
      | '==' { AbsJavalette.EQU }
      | '!=' { AbsJavalette.NE }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

