-- Haskell module generated by the BNF converter

module SkelJavalette where

import qualified AbsJavalette

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsJavalette.Ident -> Result
transIdent x = case x of
  AbsJavalette.Ident string -> failure x
transProg :: AbsJavalette.Prog -> Result
transProg x = case x of
  AbsJavalette.Program topdefs -> failure x
transTopDef :: AbsJavalette.TopDef -> Result
transTopDef x = case x of
  AbsJavalette.FnDef type_ ident args blk -> failure x
transArg :: AbsJavalette.Arg -> Result
transArg x = case x of
  AbsJavalette.Argument type_ ident -> failure x
transBlk :: AbsJavalette.Blk -> Result
transBlk x = case x of
  AbsJavalette.Block stmts -> failure x
transStmt :: AbsJavalette.Stmt -> Result
transStmt x = case x of
  AbsJavalette.Empty -> failure x
  AbsJavalette.BStmt blk -> failure x
  AbsJavalette.Decl type_ items -> failure x
  AbsJavalette.Ass ident expr -> failure x
  AbsJavalette.Incr ident -> failure x
  AbsJavalette.Decr ident -> failure x
  AbsJavalette.Ret expr -> failure x
  AbsJavalette.VRet -> failure x
  AbsJavalette.Cond expr stmt -> failure x
  AbsJavalette.CondElse expr stmt1 stmt2 -> failure x
  AbsJavalette.While expr stmt -> failure x
  AbsJavalette.SExp expr -> failure x
transItem :: AbsJavalette.Item -> Result
transItem x = case x of
  AbsJavalette.NoInit ident -> failure x
  AbsJavalette.Init ident expr -> failure x
transType :: AbsJavalette.Type -> Result
transType x = case x of
  AbsJavalette.Int -> failure x
  AbsJavalette.Doub -> failure x
  AbsJavalette.Bool -> failure x
  AbsJavalette.Void -> failure x
  AbsJavalette.String -> failure x
  AbsJavalette.Fun type_ types -> failure x
transExpr :: AbsJavalette.Expr -> Result
transExpr x = case x of
  AbsJavalette.EVar ident -> failure x
  AbsJavalette.ELitInt integer -> failure x
  AbsJavalette.ELitDoub double -> failure x
  AbsJavalette.ELitTrue -> failure x
  AbsJavalette.ELitFalse -> failure x
  AbsJavalette.EApp ident exprs -> failure x
  AbsJavalette.EString string -> failure x
  AbsJavalette.Neg expr -> failure x
  AbsJavalette.Not expr -> failure x
  AbsJavalette.EMul expr1 mulop expr2 -> failure x
  AbsJavalette.EAdd expr1 addop expr2 -> failure x
  AbsJavalette.ERel expr1 relop expr2 -> failure x
  AbsJavalette.EAnd expr1 expr2 -> failure x
  AbsJavalette.EOr expr1 expr2 -> failure x
transExp :: AbsJavalette.Exp -> Result
transExp x = case x of
  AbsJavalette.ETyped exp type_ -> failure x
transAddOp :: AbsJavalette.AddOp -> Result
transAddOp x = case x of
  AbsJavalette.Plus -> failure x
  AbsJavalette.Minus -> failure x
transMulOp :: AbsJavalette.MulOp -> Result
transMulOp x = case x of
  AbsJavalette.Times -> failure x
  AbsJavalette.Div -> failure x
  AbsJavalette.Mod -> failure x
transRelOp :: AbsJavalette.RelOp -> Result
transRelOp x = case x of
  AbsJavalette.LTH -> failure x
  AbsJavalette.LE -> failure x
  AbsJavalette.GTH -> failure x
  AbsJavalette.GE -> failure x
  AbsJavalette.EQU -> failure x
  AbsJavalette.NE -> failure x

