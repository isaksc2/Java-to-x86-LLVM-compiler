-- Haskell module generated by the BNF converter

module SkelCMM where

import qualified AbsCMM

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsCMM.Id -> Result
transId x = case x of
  AbsCMM.Id string -> failure x
transProgram :: AbsCMM.Program -> Result
transProgram x = case x of
  AbsCMM.PDefs defs -> failure x
transDef :: AbsCMM.Def -> Result
transDef x = case x of
  AbsCMM.DFun type_ id args stms -> failure x
transArg :: AbsCMM.Arg -> Result
transArg x = case x of
  AbsCMM.ADecl type_ id -> failure x
transStm :: AbsCMM.Stm -> Result
transStm x = case x of
  AbsCMM.SExp exp -> failure x
  AbsCMM.SDecls type_ ids -> failure x
  AbsCMM.SInit type_ id exp -> failure x
  AbsCMM.SReturn exp -> failure x
  AbsCMM.SWhile exp stm -> failure x
  AbsCMM.SBlock stms -> failure x
  AbsCMM.SIfElse exp stm1 stm2 -> failure x
transExp :: AbsCMM.Exp -> Result
transExp x = case x of
  AbsCMM.EBool boollit -> failure x
  AbsCMM.EInt integer -> failure x
  AbsCMM.EDouble double -> failure x
  AbsCMM.EId id -> failure x
  AbsCMM.EApp id exps -> failure x
  AbsCMM.EPost id incdecop -> failure x
  AbsCMM.EPre incdecop id -> failure x
  AbsCMM.EMul exp1 mulop exp2 -> failure x
  AbsCMM.EAdd exp1 addop exp2 -> failure x
  AbsCMM.ECmp exp1 cmpop exp2 -> failure x
  AbsCMM.EAnd exp1 exp2 -> failure x
  AbsCMM.EOr exp1 exp2 -> failure x
  AbsCMM.EAss id exp -> failure x
  AbsCMM.ETyped exp type_ -> failure x
transIncDecOp :: AbsCMM.IncDecOp -> Result
transIncDecOp x = case x of
  AbsCMM.OInc -> failure x
  AbsCMM.ODec -> failure x
transMulOp :: AbsCMM.MulOp -> Result
transMulOp x = case x of
  AbsCMM.OTimes -> failure x
  AbsCMM.ODiv -> failure x
transAddOp :: AbsCMM.AddOp -> Result
transAddOp x = case x of
  AbsCMM.OPlus -> failure x
  AbsCMM.OMinus -> failure x
transCmpOp :: AbsCMM.CmpOp -> Result
transCmpOp x = case x of
  AbsCMM.OLt -> failure x
  AbsCMM.OGt -> failure x
  AbsCMM.OLtEq -> failure x
  AbsCMM.OGtEq -> failure x
  AbsCMM.OEq -> failure x
  AbsCMM.ONEq -> failure x
transBoolLit :: AbsCMM.BoolLit -> Result
transBoolLit x = case x of
  AbsCMM.LTrue -> failure x
  AbsCMM.LFalse -> failure x
transType :: AbsCMM.Type -> Result
transType x = case x of
  AbsCMM.Type_bool -> failure x
  AbsCMM.Type_int -> failure x
  AbsCMM.Type_double -> failure x
  AbsCMM.Type_void -> failure x

